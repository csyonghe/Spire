pipeline EnginePipeline
{
    [Pinned]
    [Packed]
    input world rootVert;
    [Pinned]
    [InterfaceBlockIndex: "1"]
    input world viewUniform;
    [InterfaceBlock: "perInstanceUniform:2"]
    input world perInstanceUniform;
    [InterfaceBlock: "modelTransform:0"]
    input world modelTransform;
    [Packed]
    world precomputeVert : "glsl(bindless_texture)" export bufferExport;
    [InterfaceBlockIndex: "7"]
    world precomputeUniform : "glsl(bindless_texture)" export bufferExport;
    world precomputeTexVs : "glsl(vertex:texSpaceVert;bindless_texture)" using texSpaceVert export standardExport;
    [InterfaceBlock: "PrebakedAssets:3"]
    world precomputeTex : "glsl(bindless_texture)" export fragmentExport;
    world shadowVs : "glsl(vertex:projCoord;command_list;bindless_texture)" using projCoord export standardExport;
    world shadowFs : "glsl(command_list;bindless_texture)" using opacity, projCoord export fragmentExport;
    world vs : "glsl(vertex:projCoord;command_list;bindless_texture)" using projCoord export standardExport;
   world fs : "glsl(command_list;bindless_texture)" using opacity export fragmentExport;
    
    // * means compute the component at the specified world
    require @(vs*, shadowVs*) vec4 projCoord; 
    require @(fs*, shadowFs*) float opacity;
    require @precomputeTexVs vec4 texSpaceVert;
    // out - defines pipeline output (for dead code elimination)
    require out @(fs*) vec4 outputColor;
    require @(vs, shadowVs, precomputeTexVs) vec2 vert_uv;
    
    import uniformImport(perInstanceUniform->precomputeVert);
    import uniformImport(perInstanceUniform->precomputeTexVs);
    import uniformImport(perInstanceUniform->precomputeTex);
    import uniformImport(perInstanceUniform->vs);
    import uniformImport(perInstanceUniform->fs);
    
    import uniformImport(perInstanceUniform->shadowVs);
    import uniformImport(perInstanceUniform->shadowFs);    
        

    import uniformImport(viewUniform->vs);
    import uniformImport(viewUniform->fs);
    
    import uniformImport(viewUniform->shadowVs);
    import uniformImport(viewUniform->shadowFs);
    import uniformImport(modelTransform->vs);
    import uniformImport(modelTransform->fs);
    
    import uniformImport(modelTransform->shadowVs);
    import uniformImport(modelTransform->shadowFs);
    import bufferImport(rootVert->precomputeVert);
    import vertexImport(precomputeVert->precomputeTexVs);
    import vertexImport(precomputeVert->vs);
    import vertexImport(precomputeVert->shadowVs);
    
    import uniformImport(viewUniform->precomputeUniform);
    import uniformImport(perInstanceUniform->precomputeUniform);
    import bufferImport(precomputeVert->precomputeUniform);
    import uniformImport(precomputeUniform->vs);
    import uniformImport(precomputeUniform->fs);
    
    import uniformImport(precomputeUniform->shadowVs);
    import uniformImport(precomputeUniform->shadowFs);
    
    import standardImport(precomputeTexVs->precomputeTex);
    import standardImport(vs->fs);
    
    import standardImport(shadowVs->shadowFs);
    
    import textureImport(precomputeTex->vs) using vert_uv;
    import textureImport(precomputeTex->fs) using vert_uv;
    
    import textureImport(precomputeTex->shadowVs) using vert_uv;
    import textureImport(precomputeTex->shadowFs) using vert_uv;
}

module Shadow
{
    require vec3 pos;
    public @(fs*) float shadow = computeShadow(pos);
}

using "Utils.shader";