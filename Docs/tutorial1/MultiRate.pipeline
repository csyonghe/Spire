// declaring the multi-rate and object-space shading pipeline

pipeline MultiRatePipeline
{
    // rootVert world is used to define vertex attribute inputs.
    // "Pinned" attribute informs the compiler not to eliminate unused components defined in this world.
    // "Packed" attribute informs the compiler that components in this world come from a packed buffer
    //  where no alignment padding are added between components.
    [Pinned] [Packed]
    input world rootVert;
    
    // "InterfaceBlockIndex" attribute results all components in the world defined in a uniform buffer
    // bound at specific binding location.
    // viewUniform world is used to hold per-frame uniform inputs
    [Pinned] [InterfaceBlockIndex: "1"]
    input world viewUniform;
    
    // perInstanceUniform is used to hold per-object-instance uniform inputs
    [Pinned] [InterfaceBlock: "perInstanceUniform:2"]
    input world perInstanceUniform;
    
    // modelTransform is used to hold model transform matrices for each instance
    [InterfaceBlock: "modelTransform:0"]
    input world modelTransform;
    
    // objSurfaceVs world: corresponds to the vertex shader of object space shading phase.
    // the string literal "glsl(vertex:texSpaceVert)" informs that this world should be
    // compiled into a glsl vertex shader, and use texSpaceVert component as gl_Position
    // the "export standardExport" clause means that the output of this world should be
    // defined as standard "out" terms in the generated shader.
    world objSurfaceVs: "glsl(vertex:texSpaceVert;bindless_texture)" using texSpaceVert export standardExport;
   
    // objSurface world: corresponds to the fragment shader of object space shading phase.
    // the clause "export fragmentExport" means that the output of this world should be
    // declared as standard "out" terms in the generated shader, and informs the compiler
    // that the output of this world would be stored in textures.
    [InterfaceBlock: "ObjSpaceInput:5"]
    world objSurface : "glsl(bindless_texture)" export fragmentExport;
    
    // lowResVs world: the vertex shader for half resolution rendering phase.
    world lowResVs : "glsl(vertex:projCoord;command_list;bindless_texture)" using projCoord export standardExport;
    
    // lowRes world: the fragment shader for half resolution rendering phase.
    [InterfaceBlock : "LowResInput:6"]
    world lowRes : "glsl(command_list;bindless_texture)" export fragmentExport;
    
    // vs world: correpond to vertex shader for the full resolution shading phase.
    // the "command_list" option informs the compiler that the shader will be used along with
    //  the NV_COMMAND_LIST OpenGL extension.
    world vs : "glsl(vertex:projCoord;command_list;bindless_texture)" using projCoord export standardExport;
    
    // fs world: correspond to the fragment shader for the full resolution shading phase.
    world fs : "glsl(command_list;bindless_texture)" export fragmentExport;
    
    // require all shaders written against this pipeline to provide a component named projCoord
    //    at vs and lowRes world. This will be used as the gl_Position output.
    require @(vs, lowResVs) vec4 projCoord; 
    
    // require all shaders to provide screenCoord component.
    // this will be used as the texture coordinate to fetch the half resolution rendering results
    // in full resolution fragment shader.
    require @fs vec2 screenCoord;
    
    // require all shaders written against this pipeline to provide a component named texSpaceVert
    //    at objSurfaceVs world. This will be used as the gl_Position output.
    require @objSurfaceVs vec4 texSpaceVert;
    
    // require all shaders written against this pipeline to provide outputColor.
    // and marks outputColor as the final pipeline output.
    require out @fs vec4 outputColor;
    
    // require all shaders to provide vert_uv at rootVert world.
    // this is equivalent of saying: all shaders written against the pipeline requires the vertex buffer
    // to contain uv coordinates.
    require @rootVert vec2 vert_uv;
    
    
    // Declaring import operators. 
    /* Import operators are used to define the dependency relationship between worlds.
       Spire supports five types of dependencies:
          - uniformImport is used to define dependency between an uniform input world and a normal world.
            the source world of an uniformImport dependency will be compiled to an uniform buffer definition.
          - vertexImport is used to define dependency between an vertex buffer input world and a normal world.
            the source world of an vertexImport dependency will be regarded as the vertex attribute definition.
            the destination world must be used as a vertex shader.
          - standardImport is used to define dependency between GPU pipeline stages, 
            such as from vertex shader to fragment shader
          - textureImport is used to define dependency on a fragment shading world.
            Spire compiler will inject texture fetch operations in the user world to fetch the textures produced
            by the source world.
          - bufferImport is used to inform the compiler that the output of source world is stored in a general
            buffer. Spire will inject buffer fetch instruction to load the value at gl_InvocationIndex.
    */   
    
    import uniformImport(perInstanceUniform->vs);
    import uniformImport(perInstanceUniform->fs);
    import uniformImport(perInstanceUniform->objSurfaceVs);
    import uniformImport(perInstanceUniform->objSurface);
    import uniformImport(viewUniform->vs);
    import uniformImport(viewUniform->fs);
    import uniformImport(viewUniform->objSurfaceVs);
    import uniformImport(viewUniform->objSurface);
    import uniformImport(modelTransform->objSurfaceVs);
    import uniformImport(modelTransform->objSurface);
    import uniformImport(modelTransform->vs);
    import uniformImport(modelTransform->fs);
    import uniformImport(modelTransform->lowResVs);
    import uniformImport(modelTransform->lowRes);
    import vertexImport(rootVert->vs);
    import vertexImport(rootVert->objSurfaceVs);
    
    import standardImport(vs->fs);
    import standardImport(objSurfaceVs->objSurface);
    
    // a texture import dependency must use the "using" clause to specify 
    // the texture coordinate used to fetch the textures.
    import textureImport(objSurface->fs) using vert_uv;
    import textureImport(objSurface->vs) using vert_uv;
    
    import vertexImport(rootVert->lowResVs);
    import standardImport(lowResVs->lowRes);
    import uniformImport(perInstanceUniform->lowResVs);
    import uniformImport(perInstanceUniform->lowRes);
    import uniformImport(viewUniform->lowResVs);
    import uniformImport(viewUniform->lowRes);
    
    import textureImport(objSurface->lowRes) using vert_uv;
    import textureImport(objSurface->lowResVs) using vert_uv;
    
    // tells the compiler to use screenCoord as texture coordinate to fetch
    // rendering results from lowRes world.
    import textureImport(lowRes->fs) using screenCoord;
}

// auxilary lighting functions

float Pow4(float x)
{
    return (x*x)*(x*x);
}

vec2 LightingFuncGGX_FV(float dotLH, float roughness)
{
    float alpha = roughness*roughness;/*sf*/

    // F
    float F_a, F_b;
    float dotLH5 = Pow4(1.0-dotLH) * (1.0 - dotLH);
    F_a = 1.0;
    F_b = dotLH5;

    // V
    float vis;
    float k = alpha/2.0;
    float k2 = k*k;
    float invK2 = 1.0-k2;
    vis = 1.0/(dotLH*dotLH*invK2 + k2);

    return vec2(F_a*vis, F_b*vis);
}

float LightingFuncGGX_D(float dotNH, float roughness)
{
    float alpha = roughness*roughness;
    float alphaSqr = alpha*alpha;
    float pi = 3.14159;
    float denom = dotNH * dotNH *(alphaSqr-1.0) + 1.0;

    float D = alphaSqr/(pi * denom * denom);
    return D;
}

float ComputeHighlightPhong(vec3 L, vec3 N, vec3 V, float roughness, float metallic, float specular)
{
    vec3 H = normalize(V+L);
    float dotNL = clamp(dot(N,L), 0.01, 0.99);
    float dotNH = clamp(dot(N,H), 0.01, 0.99);

    float alpha = roughness*roughness;
    float p = 6.644/(alpha*alpha) - 6.644;
    float pi = 3.14159;
    return dotNL * metallic * exp2(p * dotNH - p) / (pi * (alpha*alpha)) * specular;
}

float ComputeHighlightGGX(vec3 L, vec3 N, vec3 V, float roughness, float metallic, float specular)
{
    vec3 H = normalize(V+L);
    float dotNL = clamp(dot(N,L), 0.01, 0.99);
    float dotLH = clamp(dot(L,H), 0.01, 0.99);
    float dotNH = clamp(dot(N,H), 0.01, 0.99);

    float D = LightingFuncGGX_D(dotNH,roughness);
    vec2 FV_helper = LightingFuncGGX_FV(dotLH,roughness);
    float FV = metallic;
    return dotNL * D * FV * specular;
}